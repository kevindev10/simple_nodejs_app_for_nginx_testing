# ====================================================================
# ðŸ”§ CONTEXTS, DIRECTIVES, AND EVENTS IN NGINX CONFIGURATION
#
# - A *directive* is an instruction (like a command or setting).
# - A *context* is the scope or block that organizes related directives.
#   Example contexts: `main`, `events`, `http`, `server`, `location`.
# - `events` is a specific context for connection-level behavior.
# ====================================================================


# ------------------------------
# MAIN (GLOBAL) CONTEXT
# This is the top-level context.
# Global directives (like worker settings) are defined here.
# ------------------------------

# ðŸ“Œ Directive: Defines number of worker processes Nginx should spawn.
# More workers = better concurrency on multi-core CPUs.
worker_processes 1;


# ------------------------------
# EVENTS CONTEXT (within MAIN)
# Handles low-level connection processing.
# ------------------------------

events {
    # ðŸ“Œ Directive: Max simultaneous client connections *per worker*.
    # This limits concurrency based on available worker processes.
    worker_connections 1024;
}


# ------------------------------
# HTTP CONTEXT (within MAIN)
# Manages all HTTP and HTTPS traffic.
# Contains nested `server` and `location` contexts.
# ------------------------------

http {
    # ðŸ“Œ Directive: Load MIME types mapping file.
    # Helps Nginx send correct Content-Type headers with responses.
    include mime.types;

    # -------------------------------------------
    # UPSTREAM CONTEXT
    # Groups backend servers for load balancing.
    # Used with proxy_pass directives.
    # -------------------------------------------
    upstream nodejs_cluster {
        least_conn;  # Load balancing method: least connections first

        # ðŸ“Œ Directive: Defines a group of backend servers.
        server 127.0.0.1:3001;
        server 127.0.0.1:3002;
        server 127.0.0.1:3003;
    }

    # -------------------------------------------
    # SERVER CONTEXT â€“ HTTPS LISTENER
    # Represents a virtual host serving secure traffic.
    # Contains nested `location` blocks.
    # -------------------------------------------
    server {
        listen 443 ssl;           # Listen for HTTPS requests
        # listen 8080;  # Listen for HTTPS requests on port 8080 (for development)
        server_name localhost;    # Match on Host header

        # TLS certificate and private key paths (self-signed in this case)
        ssl_certificate /home/kevin/nginx-certs/nginx-selfsigned.crt;
        ssl_certificate_key /home/kevin/nginx-certs/nginx-selfsigned.key;

        # LOCATION CONTEXT: Catch-all URI pattern
        location / {
            # Proxy client requests to the upstream Node.js cluster
            proxy_pass http://nodejs_cluster;

            # Preserve original client headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

    # -------------------------------------------
    # SERVER CONTEXT â€“ HTTP LISTENER (Redirect)
    # Forwards HTTP users to secure HTTPS endpoint.
    # Useful in dev/staging environments using port 8080.
    # -------------------------------------------
    server {
        listen 8080;
        server_name localhost;

        location / {
            # 301 redirect to the HTTPS version of the request
            return 301 https://$host$request_uri;
        }
    }
}
